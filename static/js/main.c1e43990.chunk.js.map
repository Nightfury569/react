{"version":3,"sources":["logo.svg","Component/HookCounterTest.js","Component/Custom Hooks/useDocumentTitle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HookCounterTest","useState","count","setCount","useEffect","document","title","console","log","useDocumentTitle","onClick","App","className","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,uNCG5B,SAASC,IACxB,IAD0C,EAEfC,mBADN,GADqB,mBAElCC,EAFkC,KAE3BC,EAF2B,KAYtC,OCbW,SAA0BD,GAEjCE,qBAAU,WACNC,SAASC,MAAT,sBAAgCJ,EAAhC,UACAK,QAAQC,IAAI,aACd,CAACN,IDMXO,CAAiBP,GAGT,6BACI,sCAAYA,GACZ,6BAGA,4BAAQQ,QAAU,kBAAIP,EAjBb,KAiBT,SACA,4BAAQO,QAAU,kBAAIP,EAASD,EAAM,KAArC,aACA,4BAAQQ,QAAU,kBAAIP,EAASD,EAAM,KAArC,c,IEuEGS,E,uKAhDX,OACC,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACpB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAmC1C,kBAACf,EAAD,Y,GAxCcgB,aChCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c1e43990.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useState,useEffect} from 'react'\r\nimport useDocumentTitle from './Custom Hooks/useDocumentTitle'\r\n\r\nexport default function HookCounterTest() {\r\nconst initialCount = 0\r\n const [count, setCount] = useState(initialCount)            \r\n\r\n\r\n//  useEffect(()=>{\r\n//      document.title = `You Clicked ${count} times`      \r\n//      console.log(\"Clicked\")\r\n//  },[count])       \r\n          \r\nuseDocumentTitle(count)\r\n\r\n    return (\r\n        <div>\r\n            <h3>Count: {count}</h3>\r\n            <br></br>\r\n\r\n            \r\n            <button onClick={ ()=>setCount(initialCount) }>Reset</button>\r\n            <button onClick={ ()=>setCount(count+1) }>Increment</button>\r\n            <button onClick={ ()=>setCount(count-1) }>Decrement</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//React Hook Tutorial [video no.31,32] of Codevolution React Tutorial [Custom Hooks]","import {useEffect} from 'react'\r\n\r\nexport default function useDocumentTitle(count) {\r\n    return (\r\n        useEffect(()=>{\r\n            document.title = `You Clicked ${count} times`      // We are changing the title name of the App, and the title will be changed depending upon count\r\n            console.log(\"Clicked\")\r\n        },[count])\r\n    )\r\n}\r\n\r\n//React Hook Tutorial [video no.31] of Codevolution React Tutorial [Custom Hooks]","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n// import HTTP_GET from './Component/HTTP_GET'\n// import HTTP_POST from './Component/HTTP_POST';\n// import HookCounter from './Component/HookCounter';\n// import HookSetName from './Component/HookSetName';\n// import HookWithArray from './Component/HookWithArray';\n// import Hook_Effect_Counter from './Hook_Effect_(Counter)';\n// import HookMouse from './Component/HookMouse';\n// import MouseContainer from './Component/MouseContainer';\n// import IntervalHookCouunter from './Component/IntervalHookCouunter';\n// import HookFetchAPI from './Component/HookFetchAPI';\n//  import HookFetchIndividualData from './Component/HookFetchIndividualData';\n// import { AgeContext, UserContext } from './Component/HookContext';\n// import ComponentB from './Component/ComponentB';\n// import ReduderCounter from './Component/ReducerCounter'\n// import HookFetchData_and_Error from './Component/HookFetchData_and_Error';\n// import ReducerFetchData from './Component/ReducerFetchData';\n// import FocusInputUseRef from './Component/FocusInputUseRef';\nimport HookCounterTest from './Component/HookCounterTest';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\nclass App extends Component {\n  render() {\n    return (\n     <div className=\"App\"> \n       <header className=\"App-header\">\n     <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n     {/* <HTTP_POST/>              //HTTP POST request\n     <HTTP_GET/>                   //HTTP GET request    */}\n     {/* <HookCounter/>            // Hooks useState*/}\n\n    {/* <HookSetName/>             // Hooks useState */}\n\n    {/* <HookWithArray/>           // Hooks useState  */}\n\n    {/* <Hook_Effect_Counter/>     //Hooks useEffect */}\n\n    {/* <HookMouse/>               //Hook useEffect */}\n\n    {/* <MouseContainer/>          //Hook useEffect */}\n\n    {/* <IntervalHookCouunter/>    //Hook useEffect */}\n\n    {/* <HookFetchAPI/>            // Hook Fetch API */}\n\n    {/* <HookFetchIndividualData/>      // Hook Fetch API */}\n\n    {/* <UserContext.Provider value=\"Prantik\">\n      <AgeContext.Provider value=\"19\">\n        <ComponentB/> \n      </AgeContext.Provider>\n    </UserContext.Provider>                    // Hooks useContext */}\n\n    {/* <ReduderCounter/>          // Hook useReducer */}\n\n    {/* <HookFetchData_and_Error/>     // Hook Fetch API */}\n\n    {/* <ReducerFetchData/>               /// Hook Fetch API with Reducer */}\n\n    {/* <FocusInputUseRef/>               // Hook useRef */}\n\n    <HookCounterTest/>\n\n     </header>     \n      </div>\n      \n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}